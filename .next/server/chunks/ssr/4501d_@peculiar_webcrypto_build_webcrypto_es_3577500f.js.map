{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Russell/Downloads/AI-Projects/Mesza/mesza-app/node_modules/.pnpm/%40peculiar%2Bwebcrypto%401.4.1/node_modules/%40peculiar/webcrypto/build/webcrypto.es.js"],"sourcesContent":["/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nimport * as core from 'webcrypto-core';\nimport { BufferSourceConverter as BufferSourceConverter$1 } from 'webcrypto-core';\nexport { CryptoKey } from 'webcrypto-core';\nimport * as crypto from 'crypto';\nimport crypto__default from 'crypto';\nimport * as process from 'process';\nimport { __decorate } from 'tslib';\nimport { JsonProp, JsonPropTypes, JsonSerializer, JsonParser } from '@peculiar/json-schema';\nimport { Convert, BufferSourceConverter } from 'pvtsutils';\nimport { AsnParser, AsnSerializer } from '@peculiar/asn1-schema';\n\nconst JsonBase64UrlConverter = {\r\n    fromJSON: (value) => Buffer.from(Convert.FromBase64Url(value)),\r\n    toJSON: (value) => Convert.ToBase64Url(value),\r\n};\n\nclass CryptoKey extends core.CryptoKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = Buffer.alloc(0);\r\n        this.algorithm = { name: \"\" };\r\n        this.extractable = false;\r\n        this.type = \"secret\";\r\n        this.usages = [];\r\n        this.kty = \"oct\";\r\n        this.alg = \"\";\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"ext\", type: JsonPropTypes.Boolean, optional: true })\r\n], CryptoKey.prototype, \"extractable\", void 0);\r\n__decorate([\r\n    JsonProp({ name: \"key_ops\", type: JsonPropTypes.String, repeated: true, optional: true })\r\n], CryptoKey.prototype, \"usages\", void 0);\r\n__decorate([\r\n    JsonProp({ type: JsonPropTypes.String })\r\n], CryptoKey.prototype, \"kty\", void 0);\r\n__decorate([\r\n    JsonProp({ type: JsonPropTypes.String, optional: true })\r\n], CryptoKey.prototype, \"alg\", void 0);\n\nclass SymmetricKey extends CryptoKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.kty = \"oct\";\r\n        this.type = \"secret\";\r\n    }\r\n}\n\nclass AsymmetricKey extends CryptoKey {\r\n}\n\nclass AesCryptoKey extends SymmetricKey {\r\n    get alg() {\r\n        switch (this.algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return `A${this.algorithm.length}CBC`;\r\n            case \"AES-CTR\":\r\n                return `A${this.algorithm.length}CTR`;\r\n            case \"AES-GCM\":\r\n                return `A${this.algorithm.length}GCM`;\r\n            case \"AES-KW\":\r\n                return `A${this.algorithm.length}KW`;\r\n            case \"AES-CMAC\":\r\n                return `A${this.algorithm.length}CMAC`;\r\n            case \"AES-ECB\":\r\n                return `A${this.algorithm.length}ECB`;\r\n            default:\r\n                throw new core.AlgorithmError(\"Unsupported algorithm name\");\r\n        }\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], AesCryptoKey.prototype, \"data\", void 0);\n\nconst keyStorage = new WeakMap();\r\nfunction getCryptoKey(key) {\r\n    const res = keyStorage.get(key);\r\n    if (!res) {\r\n        throw new core.OperationError(\"Cannot get CryptoKey from secure storage\");\r\n    }\r\n    return res;\r\n}\r\nfunction setCryptoKey(value) {\r\n    const key = core.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\r\n    Object.freeze(key);\r\n    keyStorage.set(key, value);\r\n    return key;\r\n}\n\nclass AesCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const key = new AesCryptoKey();\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(algorithm.length >> 3);\r\n        return key;\r\n    }\r\n    static async exportKey(format, key) {\r\n        if (!(key instanceof AesCryptoKey)) {\r\n            throw new Error(\"key: Is not AesCryptoKey\");\r\n        }\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"raw\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: AesCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new AesCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = algorithm;\r\n        key.algorithm.length = key.data.length << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        switch (key.algorithm.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"keyData: Is wrong key length\");\r\n        }\r\n        return key;\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\r\n            case \"AES-CTR\":\r\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\r\n            case \"AES-GCM\":\r\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\r\n            case \"AES-KW\":\r\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\r\n            case \"AES-ECB\":\r\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        if (!(key instanceof AesCryptoKey)) {\r\n            throw new Error(\"key: Is not AesCryptoKey\");\r\n        }\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\r\n            case \"AES-CTR\":\r\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\r\n            case \"AES-GCM\":\r\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\r\n            case \"AES-KW\":\r\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\r\n            case \"AES-ECB\":\r\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encryptAesCBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesCBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesCTR(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesCTR(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesGCM(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\r\n            authTagLength: (algorithm.tagLength || 128) >> 3,\r\n        });\r\n        if (algorithm.additionalData) {\r\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\r\n        }\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final(), cipher.getAuthTag()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesGCM(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\r\n        const tagLength = (algorithm.tagLength || 128) >> 3;\r\n        const enc = data.slice(0, data.length - tagLength);\r\n        const tag = data.slice(data.length - tagLength);\r\n        if (algorithm.additionalData) {\r\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\r\n        }\r\n        decipher.setAuthTag(tag);\r\n        let dec = decipher.update(enc);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesKW(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        return new Uint8Array(enc).buffer;\r\n    }\r\n    static async decryptAesKW(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesECB(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesECB(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n}\r\nAesCrypto.AES_KW_IV = Buffer.from(\"A6A6A6A6A6A6A6A6\", \"hex\");\n\nclass AesCbcProvider extends core.AesCbcProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nconst zero = Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\nconst rb = Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135]);\r\nconst blockSize = 16;\r\nfunction bitShiftLeft(buffer) {\r\n    const shifted = Buffer.alloc(buffer.length);\r\n    const last = buffer.length - 1;\r\n    for (let index = 0; index < last; index++) {\r\n        shifted[index] = buffer[index] << 1;\r\n        if (buffer[index + 1] & 0x80) {\r\n            shifted[index] += 0x01;\r\n        }\r\n    }\r\n    shifted[last] = buffer[last] << 1;\r\n    return shifted;\r\n}\r\nfunction xor(a, b) {\r\n    const length = Math.min(a.length, b.length);\r\n    const output = Buffer.alloc(length);\r\n    for (let index = 0; index < length; index++) {\r\n        output[index] = a[index] ^ b[index];\r\n    }\r\n    return output;\r\n}\r\nfunction aes(key, message) {\r\n    const cipher = crypto.createCipheriv(`aes${key.length << 3}`, key, zero);\r\n    const result = cipher.update(message);\r\n    cipher.final();\r\n    return result;\r\n}\r\nfunction getMessageBlock(message, blockIndex) {\r\n    const block = Buffer.alloc(blockSize);\r\n    const start = blockIndex * blockSize;\r\n    const end = start + blockSize;\r\n    message.copy(block, 0, start, end);\r\n    return block;\r\n}\r\nfunction getPaddedMessageBlock(message, blockIndex) {\r\n    const block = Buffer.alloc(blockSize);\r\n    const start = blockIndex * blockSize;\r\n    const end = message.length;\r\n    block.fill(0);\r\n    message.copy(block, 0, start, end);\r\n    block[end - start] = 0x80;\r\n    return block;\r\n}\r\nfunction generateSubkeys(key) {\r\n    const l = aes(key, zero);\r\n    let subkey1 = bitShiftLeft(l);\r\n    if (l[0] & 0x80) {\r\n        subkey1 = xor(subkey1, rb);\r\n    }\r\n    let subkey2 = bitShiftLeft(subkey1);\r\n    if (subkey1[0] & 0x80) {\r\n        subkey2 = xor(subkey2, rb);\r\n    }\r\n    return { subkey1, subkey2 };\r\n}\r\nfunction aesCmac(key, message) {\r\n    const subkeys = generateSubkeys(key);\r\n    let blockCount = Math.ceil(message.length / blockSize);\r\n    let lastBlockCompleteFlag;\r\n    let lastBlock;\r\n    if (blockCount === 0) {\r\n        blockCount = 1;\r\n        lastBlockCompleteFlag = false;\r\n    }\r\n    else {\r\n        lastBlockCompleteFlag = (message.length % blockSize === 0);\r\n    }\r\n    const lastBlockIndex = blockCount - 1;\r\n    if (lastBlockCompleteFlag) {\r\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\r\n    }\r\n    else {\r\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\r\n    }\r\n    let x = zero;\r\n    let y;\r\n    for (let index = 0; index < lastBlockIndex; index++) {\r\n        y = xor(x, getMessageBlock(message, index));\r\n        x = aes(key, y);\r\n    }\r\n    y = xor(lastBlock, x);\r\n    return aes(key, y);\r\n}\r\nclass AesCmacProvider extends core.AesCmacProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\r\n        return new Uint8Array(result).buffer;\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        const signature2 = await this.sign(algorithm, key, data);\r\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesCtrProvider extends core.AesCtrProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesGcmProvider extends core.AesGcmProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesKwProvider extends core.AesKwProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesEcbProvider extends core.AesEcbProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass DesCryptoKey extends SymmetricKey {\r\n    get alg() {\r\n        switch (this.algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return `DES-CBC`;\r\n            case \"DES-EDE3-CBC\":\r\n                return `3DES-CBC`;\r\n            default:\r\n                throw new core.AlgorithmError(\"Unsupported algorithm name\");\r\n        }\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], DesCryptoKey.prototype, \"data\", void 0);\n\nclass DesCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const key = new DesCryptoKey();\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(algorithm.length >> 3);\r\n        return key;\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"raw\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: DesCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new DesCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\r\n            case \"DES-EDE3-CBC\":\r\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        if (!(key instanceof DesCryptoKey)) {\r\n            throw new Error(\"key: Is not DesCryptoKey\");\r\n        }\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\r\n            case \"DES-EDE3-CBC\":\r\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encryptDesCBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptDesCBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptDesEDE3CBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptDesEDE3CBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n}\n\nclass DesCbcProvider extends core.DesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.keySizeBits = 64;\r\n        this.ivSize = 8;\r\n        this.name = \"DES-CBC\";\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.generateKey({\r\n            name: this.name,\r\n            length: this.keySizeBits,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return DesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.importKey(format, keyData, { name: this.name, length: this.keySizeBits }, extractable, keyUsages);\r\n        if (key.data.length !== (this.keySizeBits >> 3)) {\r\n            throw new core.OperationError(\"keyData: Wrong key size\");\r\n        }\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass DesEde3CbcProvider extends core.DesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.keySizeBits = 192;\r\n        this.ivSize = 8;\r\n        this.name = \"DES-EDE3-CBC\";\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.generateKey({\r\n            name: this.name,\r\n            length: this.keySizeBits,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return DesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.importKey(format, keyData, { name: this.name, length: this.keySizeBits }, extractable, keyUsages);\r\n        if (key.data.length !== (this.keySizeBits >> 3)) {\r\n            throw new core.OperationError(\"keyData: Wrong key size\");\r\n        }\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nfunction getJwkAlgorithm(algorithm) {\r\n    switch (algorithm.name.toUpperCase()) {\r\n        case \"RSA-OAEP\": {\r\n            const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\r\n            return `RSA-OAEP${mdSize !== \"1\" ? `-${mdSize}` : \"\"}`;\r\n        }\r\n        case \"RSASSA-PKCS1-V1_5\":\r\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\r\n        case \"RSA-PSS\":\r\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\r\n        case \"RSA-PKCS1\":\r\n            return `RS1`;\r\n        default:\r\n            throw new core.OperationError(\"algorithm: Is not recognized\");\r\n    }\r\n}\n\nclass RsaPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.RsaPrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"RSA\",\r\n            alg: getJwkAlgorithm(this.algorithm),\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.RsaPrivateKey });\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = null;\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n    }\r\n}\n\nclass RsaPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return AsnParser.parse(keyInfo.publicKey, core.asn1.RsaPublicKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"RSA\",\r\n            alg: getJwkAlgorithm(this.algorithm),\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.RsaPublicKey });\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = null;\r\n        keyInfo.publicKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n    }\r\n}\n\nclass RsaCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new RsaPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new RsaPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const publicExponent = Buffer.concat([\r\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\r\n            Buffer.from(algorithm.publicExponent),\r\n        ]).readInt32BE(0);\r\n        const keys = crypto__default.generateKeyPairSync(\"rsa\", {\r\n            modulusLength: algorithm.modulusLength,\r\n            publicExponent,\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.RsaPrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.RsaPublicKey });\r\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.publicKey, core.asn1.RsaPublicKey);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.RsaPrivateKey);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-PSS\":\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                return this.signRsa(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-PSS\":\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                return this.verifySSA(algorithm, key, data, signature);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-OAEP\":\r\n                return this.encryptOAEP(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-OAEP\":\r\n                return this.decryptOAEP(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = null;\r\n        keyInfo.privateKey = AsnSerializer.serialize(asnKey);\r\n        const key = new RsaPrivateKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\r\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = null;\r\n        keyInfo.publicKey = AsnSerializer.serialize(asnKey);\r\n        const key = new RsaPublicKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\r\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static getCryptoAlgorithm(alg) {\r\n        switch (alg.hash.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return \"RSA-SHA1\";\r\n            case \"SHA-256\":\r\n                return \"RSA-SHA256\";\r\n            case \"SHA-384\":\r\n                return \"RSA-SHA384\";\r\n            case \"SHA-512\":\r\n                return \"RSA-SHA512\";\r\n            case \"SHA3-256\":\r\n                return \"RSA-SHA3-256\";\r\n            case \"SHA3-384\":\r\n                return \"RSA-SHA3-384\";\r\n            case \"SHA3-512\":\r\n                return \"RSA-SHA3-512\";\r\n            default:\r\n                throw new core.OperationError(\"algorithm.hash: Is not recognized\");\r\n        }\r\n    }\r\n    static signRsa(algorithm, key, data) {\r\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\r\n        const signer = crypto__default.createSign(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\r\n            options.padding = crypto__default.constants.RSA_PKCS1_PSS_PADDING;\r\n            options.saltLength = algorithm.saltLength;\r\n        }\r\n        const signature = signer.sign(options);\r\n        return new Uint8Array(signature).buffer;\r\n    }\r\n    static verifySSA(algorithm, key, data, signature) {\r\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\r\n        const signer = crypto__default.createVerify(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\r\n            options.padding = crypto__default.constants.RSA_PKCS1_PSS_PADDING;\r\n            options.saltLength = algorithm.saltLength;\r\n        }\r\n        const ok = signer.verify(options, signature);\r\n        return ok;\r\n    }\r\n    static encryptOAEP(algorithm, key, data) {\r\n        const options = {\r\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`,\r\n            padding: crypto__default.constants.RSA_PKCS1_OAEP_PADDING,\r\n        };\r\n        if (algorithm.label) ;\r\n        return new Uint8Array(crypto__default.publicEncrypt(options, data)).buffer;\r\n    }\r\n    static decryptOAEP(algorithm, key, data) {\r\n        const options = {\r\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`,\r\n            padding: crypto__default.constants.RSA_PKCS1_OAEP_PADDING,\r\n        };\r\n        if (algorithm.label) ;\r\n        return new Uint8Array(crypto__default.privateDecrypt(options, data)).buffer;\r\n    }\r\n}\r\nRsaCrypto.publicKeyUsages = [\"verify\", \"encrypt\", \"wrapKey\"];\r\nRsaCrypto.privateKeyUsages = [\"sign\", \"decrypt\", \"unwrapKey\"];\n\nclass RsaSsaProvider extends core.RsaSsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass RsaPssProvider extends core.RsaPssProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass ShaCrypto {\r\n    static size(algorithm) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return 160;\r\n            case \"SHA-256\":\r\n            case \"SHA3-256\":\r\n                return 256;\r\n            case \"SHA-384\":\r\n            case \"SHA3-384\":\r\n                return 384;\r\n            case \"SHA-512\":\r\n            case \"SHA3-512\":\r\n                return 512;\r\n            default:\r\n                throw new Error(\"Unrecognized name\");\r\n        }\r\n    }\r\n    static getAlgorithmName(algorithm) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return \"sha1\";\r\n            case \"SHA-256\":\r\n                return \"sha256\";\r\n            case \"SHA-384\":\r\n                return \"sha384\";\r\n            case \"SHA-512\":\r\n                return \"sha512\";\r\n            case \"SHA3-256\":\r\n                return \"sha3-256\";\r\n            case \"SHA3-384\":\r\n                return \"sha3-384\";\r\n            case \"SHA3-512\":\r\n                return \"sha3-512\";\r\n            default:\r\n                throw new Error(\"Unrecognized name\");\r\n        }\r\n    }\r\n    static digest(algorithm, data) {\r\n        const hashAlg = this.getAlgorithmName(algorithm);\r\n        const hash = crypto__default.createHash(hashAlg)\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hash).buffer;\r\n    }\r\n}\n\nclass RsaOaepProvider extends core.RsaOaepProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        const internalKey = getCryptoKey(key);\r\n        const dataView = new Uint8Array(data);\r\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\r\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\r\n        const dataLength = dataView.byteLength;\r\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\r\n        if (dataLength > keySize - 2 * hashSize - 2) {\r\n            throw new Error(\"Data too large\");\r\n        }\r\n        const message = new Uint8Array(keySize);\r\n        const seed = message.subarray(1, hashSize + 1);\r\n        const dataBlock = message.subarray(hashSize + 1);\r\n        dataBlock.set(dataView, hashSize + psLength + 1);\r\n        const labelHash = crypto__default.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\"))\r\n            .update(core.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0)))\r\n            .digest();\r\n        dataBlock.set(labelHash, 0);\r\n        dataBlock[hashSize + psLength] = 1;\r\n        crypto__default.randomFillSync(seed);\r\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\r\n        for (let i = 0; i < dataBlock.length; i++) {\r\n            dataBlock[i] ^= dataBlockMask[i];\r\n        }\r\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\r\n        for (let i = 0; i < seed.length; i++) {\r\n            seed[i] ^= seedMask[i];\r\n        }\r\n        if (!internalKey.pem) {\r\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const pkcs0 = crypto__default.publicEncrypt({\r\n            key: internalKey.pem,\r\n            padding: crypto__default.constants.RSA_NO_PADDING,\r\n        }, Buffer.from(message));\r\n        return new Uint8Array(pkcs0).buffer;\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        const internalKey = getCryptoKey(key);\r\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\r\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\r\n        const dataLength = data.byteLength;\r\n        if (dataLength !== keySize) {\r\n            throw new Error(\"Bad data\");\r\n        }\r\n        if (!internalKey.pem) {\r\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        let pkcs0 = crypto__default.privateDecrypt({\r\n            key: internalKey.pem,\r\n            padding: crypto__default.constants.RSA_NO_PADDING,\r\n        }, Buffer.from(data));\r\n        const z = pkcs0[0];\r\n        const seed = pkcs0.subarray(1, hashSize + 1);\r\n        const dataBlock = pkcs0.subarray(hashSize + 1);\r\n        if (z !== 0) {\r\n            throw new Error(\"Decryption failed\");\r\n        }\r\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\r\n        for (let i = 0; i < seed.length; i++) {\r\n            seed[i] ^= seedMask[i];\r\n        }\r\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\r\n        for (let i = 0; i < dataBlock.length; i++) {\r\n            dataBlock[i] ^= dataBlockMask[i];\r\n        }\r\n        const labelHash = crypto__default.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\"))\r\n            .update(core.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0)))\r\n            .digest();\r\n        for (let i = 0; i < hashSize; i++) {\r\n            if (labelHash[i] !== dataBlock[i]) {\r\n                throw new Error(\"Decryption failed\");\r\n            }\r\n        }\r\n        let psEnd = hashSize;\r\n        for (; psEnd < dataBlock.length; psEnd++) {\r\n            const psz = dataBlock[psEnd];\r\n            if (psz === 1) {\r\n                break;\r\n            }\r\n            if (psz !== 0) {\r\n                throw new Error(\"Decryption failed\");\r\n            }\r\n        }\r\n        if (psEnd === dataBlock.length) {\r\n            throw new Error(\"Decryption failed\");\r\n        }\r\n        pkcs0 = dataBlock.subarray(psEnd + 1);\r\n        return new Uint8Array(pkcs0).buffer;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n    mgf1(algorithm, seed, length = 0) {\r\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\r\n        const mask = new Uint8Array(length);\r\n        const counter = new Uint8Array(4);\r\n        const chunks = Math.ceil(length / hashSize);\r\n        for (let i = 0; i < chunks; i++) {\r\n            counter[0] = i >>> 24;\r\n            counter[1] = (i >>> 16) & 255;\r\n            counter[2] = (i >>> 8) & 255;\r\n            counter[3] = i & 255;\r\n            const submask = mask.subarray(i * hashSize);\r\n            let chunk = crypto__default.createHash(algorithm.name.replace(\"-\", \"\"))\r\n                .update(seed)\r\n                .update(counter)\r\n                .digest();\r\n            if (chunk.length > submask.length) {\r\n                chunk = chunk.subarray(0, submask.length);\r\n            }\r\n            submask.set(chunk);\r\n        }\r\n        return mask;\r\n    }\r\n}\n\nclass RsaEsProvider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSAES-PKCS1-v1_5\";\r\n        this.usages = {\r\n            publicKey: [\"encrypt\", \"wrapKey\"],\r\n            privateKey: [\"decrypt\", \"unwrapKey\"],\r\n        };\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\r\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\r\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\r\n        }\r\n        const publicExponent = Convert.ToBase64(algorithm.publicExponent);\r\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\r\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\r\n        switch (algorithm.modulusLength) {\r\n            case 1024:\r\n            case 2048:\r\n            case 4096:\r\n                break;\r\n            default:\r\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\r\n        }\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        const options = this.toCryptoOptions(key);\r\n        const enc = crypto.publicEncrypt(options, new Uint8Array(data));\r\n        return new Uint8Array(enc).buffer;\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        const options = this.toCryptoOptions(key);\r\n        const dec = crypto.privateDecrypt(options, new Uint8Array(data));\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n    toCryptoOptions(key) {\r\n        const type = key.type.toUpperCase();\r\n        return {\r\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString(\"base64\")}\\n-----END ${type} KEY-----`,\r\n            padding: crypto.constants.RSA_PKCS1_PADDING,\r\n        };\r\n    }\r\n}\n\nconst namedOIDs = {\r\n    \"1.2.840.10045.3.1.7\": \"P-256\",\r\n    \"P-256\": \"1.2.840.10045.3.1.7\",\r\n    \"1.3.132.0.34\": \"P-384\",\r\n    \"P-384\": \"1.3.132.0.34\",\r\n    \"1.3.132.0.35\": \"P-521\",\r\n    \"P-521\": \"1.3.132.0.35\",\r\n    \"1.3.132.0.10\": \"K-256\",\r\n    \"K-256\": \"1.3.132.0.10\",\r\n    \"brainpoolP160r1\": \"1.3.36.3.3.2.8.1.1.1\",\r\n    \"1.3.36.3.3.2.8.1.1.1\": \"brainpoolP160r1\",\r\n    \"brainpoolP160t1\": \"1.3.36.3.3.2.8.1.1.2\",\r\n    \"1.3.36.3.3.2.8.1.1.2\": \"brainpoolP160t1\",\r\n    \"brainpoolP192r1\": \"1.3.36.3.3.2.8.1.1.3\",\r\n    \"1.3.36.3.3.2.8.1.1.3\": \"brainpoolP192r1\",\r\n    \"brainpoolP192t1\": \"1.3.36.3.3.2.8.1.1.4\",\r\n    \"1.3.36.3.3.2.8.1.1.4\": \"brainpoolP192t1\",\r\n    \"brainpoolP224r1\": \"1.3.36.3.3.2.8.1.1.5\",\r\n    \"1.3.36.3.3.2.8.1.1.5\": \"brainpoolP224r1\",\r\n    \"brainpoolP224t1\": \"1.3.36.3.3.2.8.1.1.6\",\r\n    \"1.3.36.3.3.2.8.1.1.6\": \"brainpoolP224t1\",\r\n    \"brainpoolP256r1\": \"1.3.36.3.3.2.8.1.1.7\",\r\n    \"1.3.36.3.3.2.8.1.1.7\": \"brainpoolP256r1\",\r\n    \"brainpoolP256t1\": \"1.3.36.3.3.2.8.1.1.8\",\r\n    \"1.3.36.3.3.2.8.1.1.8\": \"brainpoolP256t1\",\r\n    \"brainpoolP320r1\": \"1.3.36.3.3.2.8.1.1.9\",\r\n    \"1.3.36.3.3.2.8.1.1.9\": \"brainpoolP320r1\",\r\n    \"brainpoolP320t1\": \"1.3.36.3.3.2.8.1.1.10\",\r\n    \"1.3.36.3.3.2.8.1.1.10\": \"brainpoolP320t1\",\r\n    \"brainpoolP384r1\": \"1.3.36.3.3.2.8.1.1.11\",\r\n    \"1.3.36.3.3.2.8.1.1.11\": \"brainpoolP384r1\",\r\n    \"brainpoolP384t1\": \"1.3.36.3.3.2.8.1.1.12\",\r\n    \"1.3.36.3.3.2.8.1.1.12\": \"brainpoolP384t1\",\r\n    \"brainpoolP512r1\": \"1.3.36.3.3.2.8.1.1.13\",\r\n    \"1.3.36.3.3.2.8.1.1.13\": \"brainpoolP512r1\",\r\n    \"brainpoolP512t1\": \"1.3.36.3.3.2.8.1.1.14\",\r\n    \"1.3.36.3.3.2.8.1.1.14\": \"brainpoolP512t1\",\r\n};\r\nfunction getOidByNamedCurve$1(namedCurve) {\r\n    const oid = namedOIDs[namedCurve];\r\n    if (!oid) {\r\n        throw new core.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\r\n    }\r\n    return oid;\r\n}\n\nclass EcPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.EcPrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"EC\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.EcPrivateKey });\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EcPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return new core.asn1.EcPublicKey(keyInfo.publicKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"EC\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.EcPublicKey });\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\r\n        keyInfo.publicKey = AsnSerializer.toASN(key).valueHex;\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass Sha1Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-1\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha256Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-256\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha384Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-384\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha512Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-512\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3256Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-256\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3384Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-384\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3512Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-512\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass EcCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new EcPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new EcPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const keys = crypto__default.generateKeyPairSync(\"ec\", {\r\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\r\n        const signer = crypto__default.createSign(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const signature = signer.sign(options);\r\n        const ecSignature = AsnParser.parse(signature, core.asn1.EcDsaSignature);\r\n        const signatureRaw = core.EcUtils.encodeSignature(ecSignature, core.EcCurves.get(key.algorithm.namedCurve).size);\r\n        return signatureRaw.buffer;\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\r\n        const signer = crypto__default.createVerify(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const ecSignature = new core.asn1.EcDsaSignature();\r\n        const namedCurve = core.EcCurves.get(key.algorithm.namedCurve);\r\n        const signaturePoint = core.EcUtils.decodeSignature(signature, namedCurve.size);\r\n        ecSignature.r = BufferSourceConverter.toArrayBuffer(signaturePoint.r);\r\n        ecSignature.s = BufferSourceConverter.toArrayBuffer(signaturePoint.s);\r\n        const ecSignatureRaw = Buffer.from(AsnSerializer.serialize(ecSignature));\r\n        const ok = signer.verify(options, ecSignatureRaw);\r\n        return ok;\r\n    }\r\n    static async deriveBits(algorithm, baseKey, length) {\r\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\r\n        const ecdh = crypto__default.createECDH(cryptoAlg);\r\n        const asnPrivateKey = AsnParser.parse(baseKey.data, core.asn1.PrivateKeyInfo);\r\n        const asnEcPrivateKey = AsnParser.parse(asnPrivateKey.privateKey, core.asn1.EcPrivateKey);\r\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\r\n        const asnPublicKey = AsnParser.parse(algorithm.public.data, core.asn1.PublicKeyInfo);\r\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\r\n        if (length === null) {\r\n            return bits;\r\n        }\r\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            case \"raw\": {\r\n                const publicKeyInfo = AsnParser.parse(key.data, core.asn1.PublicKeyInfo);\r\n                return publicKeyInfo.publicKey;\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.EcPrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.EcPublicKey });\r\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"raw\": {\r\n                const asnKey = new core.asn1.EcPublicKey(keyData);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                const asnKey = new core.asn1.EcPublicKey(keyInfo.publicKey);\r\n                this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.EcPrivateKey);\r\n                this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static assertKeyParameters(parameters, namedCurve) {\r\n        if (!parameters) {\r\n            throw new core.CryptoError(\"Key info doesn't have required parameters\");\r\n        }\r\n        let namedCurveIdentifier = \"\";\r\n        try {\r\n            namedCurveIdentifier = AsnParser.parse(parameters, core.asn1.ObjectIdentifier).value;\r\n        }\r\n        catch (e) {\r\n            throw new core.CryptoError(\"Cannot read key info parameters\");\r\n        }\r\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\r\n            throw new core.CryptoError(\"Key info parameter doesn't match to named curve\");\r\n        }\r\n    }\r\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\r\n        keyInfo.privateKey = AsnSerializer.serialize(asnKey);\r\n        const key = new EcPrivateKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\r\n        keyInfo.publicKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(namedCurve));\r\n        keyInfo.publicKey = asnKey.value;\r\n        const key = new EcPublicKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static getOpenSSLNamedCurve(curve) {\r\n        switch (curve.toUpperCase()) {\r\n            case \"P-256\":\r\n                return \"prime256v1\";\r\n            case \"K-256\":\r\n                return \"secp256k1\";\r\n            case \"P-384\":\r\n                return \"secp384r1\";\r\n            case \"P-521\":\r\n                return \"secp521r1\";\r\n            default:\r\n                return curve;\r\n        }\r\n    }\r\n}\r\nEcCrypto.publicKeyUsages = [\"verify\"];\r\nEcCrypto.privateKeyUsages = [\"sign\", \"deriveKey\", \"deriveBits\"];\n\nclass EcdsaProvider extends core.EcdsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.namedCurves = core.EcCurves.names;\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EcCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EcCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EcCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\r\n            throw new TypeError(\"key: Is not EC CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass EcdhProvider extends core.EcdhProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.namedCurves = core.EcCurves.names;\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EcCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EcCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EcCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\r\n            throw new TypeError(\"key: Is not EC CryptoKey\");\r\n        }\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        const bits = await EcCrypto.deriveBits({ ...algorithm, public: getCryptoKey(algorithm.public) }, getCryptoKey(baseKey), length);\r\n        return bits;\r\n    }\r\n}\n\nconst edOIDs = {\r\n    [core.asn1.idEd448]: \"Ed448\",\r\n    \"ed448\": core.asn1.idEd448,\r\n    [core.asn1.idX448]: \"X448\",\r\n    \"x448\": core.asn1.idX448,\r\n    [core.asn1.idEd25519]: \"Ed25519\",\r\n    \"ed25519\": core.asn1.idEd25519,\r\n    [core.asn1.idX25519]: \"X25519\",\r\n    \"x25519\": core.asn1.idX25519,\r\n};\r\nfunction getOidByNamedCurve(namedCurve) {\r\n    const oid = edOIDs[namedCurve.toLowerCase()];\r\n    if (!oid) {\r\n        throw new core.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\r\n    }\r\n    return oid;\r\n}\n\nclass EdPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.CurvePrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"OKP\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.CurvePrivateKey });\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EdPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return keyInfo.publicKey;\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"OKP\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, {\r\n            x: Convert.ToBase64Url(key)\r\n        });\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        if (!json.x) {\r\n            throw new core.OperationError(`Cannot get property from JWK. Property 'x' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\r\n        keyInfo.publicKey = Convert.FromBase64Url(json.x);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EdCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new EdPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new EdPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const type = algorithm.namedCurve.toLowerCase();\r\n        const keys = crypto__default.generateKeyPairSync(type, {\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const signature = crypto__default.sign(null, Buffer.from(data), options);\r\n        return core.BufferSourceConverter.toArrayBuffer(signature);\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const ok = crypto__default.verify(null, Buffer.from(data), options, Buffer.from(signature));\r\n        return ok;\r\n    }\r\n    static async deriveBits(algorithm, baseKey, length) {\r\n        const publicKey = crypto__default.createPublicKey({\r\n            key: algorithm.public.data,\r\n            format: \"der\",\r\n            type: \"spki\",\r\n        });\r\n        const privateKey = crypto__default.createPrivateKey({\r\n            key: baseKey.data,\r\n            format: \"der\",\r\n            type: \"pkcs8\",\r\n        });\r\n        const bits = crypto__default.diffieHellman({\r\n            publicKey,\r\n            privateKey,\r\n        });\r\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            case \"raw\": {\r\n                const publicKeyInfo = AsnParser.parse(key.data, core.asn1.PublicKeyInfo);\r\n                return publicKeyInfo.publicKey;\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.CurvePrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    if (!jwk.x) {\r\n                        throw new TypeError(\"keyData: Cannot get required 'x' filed\");\r\n                    }\r\n                    return this.importPublicKey(Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"raw\": {\r\n                return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.CurvePrivateKey);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const key = new EdPrivateKey();\r\n        key.fromJSON({\r\n            crv: algorithm.namedCurve,\r\n            d: Convert.ToBase64Url(asnKey.d),\r\n        });\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const key = new EdPublicKey();\r\n        key.fromJSON({\r\n            crv: algorithm.namedCurve,\r\n            x: Convert.ToBase64Url(asnKey),\r\n        });\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n}\r\nEdCrypto.publicKeyUsages = [\"verify\"];\r\nEdCrypto.privateKeyUsages = [\"sign\", \"deriveKey\", \"deriveBits\"];\n\nclass EdDsaProvider extends core.EdDsaProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EdCrypto.generateKey({\r\n            name: this.name,\r\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, \"Ed\"),\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EdCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EdCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n}\n\nclass EcdhEsProvider extends core.EcdhEsProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EdCrypto.generateKey({\r\n            name: this.name,\r\n            namedCurve: algorithm.namedCurve.toUpperCase(),\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        const bits = await EdCrypto.deriveBits({ ...algorithm, public: getCryptoKey(algorithm.public) }, getCryptoKey(baseKey), length);\r\n        return bits;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EdCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EdCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n}\n\nclass PbkdfCryptoKey extends CryptoKey {\r\n}\n\nclass Pbkdf2Provider extends core.Pbkdf2Provider {\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        return new Promise((resolve, reject) => {\r\n            const salt = core.BufferSourceConverter.toArrayBuffer(algorithm.salt);\r\n            const hash = algorithm.hash.name.replace(\"-\", \"\");\r\n            crypto__default.pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(new Uint8Array(derivedBits).buffer);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        if (format === \"raw\") {\r\n            const key = new PbkdfCryptoKey();\r\n            key.data = Buffer.from(keyData);\r\n            key.algorithm = { name: this.name };\r\n            key.extractable = false;\r\n            key.usages = keyUsages;\r\n            return setCryptoKey(key);\r\n        }\r\n        throw new core.OperationError(\"format: Must be 'raw'\");\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\r\n            throw new TypeError(\"key: Is not PBKDF CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass HmacCryptoKey extends CryptoKey {\r\n    get alg() {\r\n        const hash = this.algorithm.hash.name.toUpperCase();\r\n        return `HS${hash.replace(\"SHA-\", \"\")}`;\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], HmacCryptoKey.prototype, \"data\", void 0);\n\nclass HmacProvider extends core.HmacProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\r\n        const key = new HmacCryptoKey();\r\n        key.algorithm = {\r\n            ...algorithm,\r\n            length,\r\n            name: this.name,\r\n        };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(length >> 3);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\r\n        const hmac = crypto__default.createHmac(cryptoAlg, getCryptoKey(key).data)\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hmac).buffer;\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\r\n        const hmac = crypto__default.createHmac(cryptoAlg, getCryptoKey(key).data)\r\n            .update(Buffer.from(data)).digest();\r\n        return hmac.compare(Buffer.from(signature)) === 0;\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: HmacCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new HmacCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = {\r\n            hash: { name: algorithm.hash.name },\r\n            name: this.name,\r\n            length: key.data.length << 3,\r\n        };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return setCryptoKey(key);\r\n    }\r\n    async onExportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(getCryptoKey(key));\r\n            case \"raw\":\r\n                return new Uint8Array(getCryptoKey(key).data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\r\n            throw new TypeError(\"key: Is not HMAC CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass HkdfCryptoKey extends CryptoKey {\r\n}\n\nclass HkdfProvider extends core.HkdfProvider {\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        if (format.toLowerCase() !== \"raw\") {\r\n            throw new core.OperationError(\"Operation not supported\");\r\n        }\r\n        const key = new HkdfCryptoKey();\r\n        key.data = Buffer.from(keyData);\r\n        key.algorithm = { name: this.name };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return setCryptoKey(key);\r\n    }\r\n    async onDeriveBits(params, baseKey, length) {\r\n        const hash = params.hash.name.replace(\"-\", \"\");\r\n        const hashLength = crypto__default.createHash(hash).digest().length;\r\n        const byteLength = length / 8;\r\n        const info = BufferSourceConverter$1.toUint8Array(params.info);\r\n        const PRK = crypto__default.createHmac(hash, BufferSourceConverter$1.toUint8Array(params.salt))\r\n            .update(BufferSourceConverter$1.toUint8Array(getCryptoKey(baseKey).data))\r\n            .digest();\r\n        const blocks = [Buffer.alloc(0)];\r\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\r\n        for (let i = 1; i < blockCount; ++i) {\r\n            blocks.push(crypto__default.createHmac(hash, PRK)\r\n                .update(Buffer.concat([blocks[i - 1], info, Buffer.from([i])]))\r\n                .digest());\r\n        }\r\n        return Buffer.concat(blocks).slice(0, byteLength);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\r\n            throw new TypeError(\"key: Is not HKDF CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass ShakeCrypto {\r\n    static digest(algorithm, data) {\r\n        const hash = crypto__default.createHash(algorithm.name.toLowerCase(), { outputLength: algorithm.length })\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hash).buffer;\r\n    }\r\n}\n\nclass Shake128Provider extends core.Shake128Provider {\r\n    async onDigest(algorithm, data) {\r\n        return ShakeCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Shake256Provider extends core.Shake256Provider {\r\n    async onDigest(algorithm, data) {\r\n        return ShakeCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass SubtleCrypto extends core.SubtleCrypto {\r\n    constructor() {\r\n        var _a;\r\n        super();\r\n        this.providers.set(new AesCbcProvider());\r\n        this.providers.set(new AesCtrProvider());\r\n        this.providers.set(new AesGcmProvider());\r\n        this.providers.set(new AesCmacProvider());\r\n        this.providers.set(new AesKwProvider());\r\n        this.providers.set(new AesEcbProvider());\r\n        this.providers.set(new DesCbcProvider());\r\n        this.providers.set(new DesEde3CbcProvider());\r\n        this.providers.set(new RsaSsaProvider());\r\n        this.providers.set(new RsaPssProvider());\r\n        this.providers.set(new RsaOaepProvider());\r\n        this.providers.set(new RsaEsProvider());\r\n        this.providers.set(new EcdsaProvider());\r\n        this.providers.set(new EcdhProvider());\r\n        this.providers.set(new Sha1Provider());\r\n        this.providers.set(new Sha256Provider());\r\n        this.providers.set(new Sha384Provider());\r\n        this.providers.set(new Sha512Provider());\r\n        this.providers.set(new Pbkdf2Provider());\r\n        this.providers.set(new HmacProvider());\r\n        this.providers.set(new HkdfProvider());\r\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process.version)) === null || _a === void 0 ? void 0 : _a[1];\r\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\r\n            this.providers.set(new Shake128Provider());\r\n            this.providers.set(new Shake256Provider());\r\n        }\r\n        const hashes = crypto.getHashes();\r\n        if (hashes.includes(\"sha3-256\")) {\r\n            this.providers.set(new Sha3256Provider());\r\n        }\r\n        if (hashes.includes(\"sha3-384\")) {\r\n            this.providers.set(new Sha3384Provider());\r\n        }\r\n        if (hashes.includes(\"sha3-512\")) {\r\n            this.providers.set(new Sha3512Provider());\r\n        }\r\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\r\n            this.providers.set(new EdDsaProvider());\r\n            this.providers.set(new EcdhEsProvider());\r\n        }\r\n    }\r\n}\n\nclass Crypto extends core.Crypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.subtle = new SubtleCrypto();\r\n    }\r\n    getRandomValues(array) {\r\n        if (!ArrayBuffer.isView(array)) {\r\n            throw new TypeError(\"Failed to execute 'getRandomValues' on 'Crypto': parameter 1 is not of type 'ArrayBufferView'\");\r\n        }\r\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\r\n        crypto__default.randomFillSync(buffer);\r\n        return array;\r\n    }\r\n}\n\nexport { Crypto };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}